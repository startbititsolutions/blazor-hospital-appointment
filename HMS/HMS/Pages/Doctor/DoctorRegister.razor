@page "/Register/doctor"
@inject IJSRuntime js;
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject TooltipService tooltipService
@attribute [Authorize(Roles ="Admin")]
<PageTitle>Doctor Registration</PageTitle>
<RadzenCard class="rz-mx-0">
    <RadzenRow JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Normal" Gap="1rem">
        <RadzenColumn Size="12" class="rz-text-align-center">
            <RadzenBreadCrumb>
                <RadzenBreadCrumbItem Path="/" Text="" />
                <RadzenBreadCrumbItem Path="/Register" Text="Registration" />
                <RadzenBreadCrumbItem Path="/Register/doctor" Text="Doctor Registration" />
            </RadzenBreadCrumb>
        </RadzenColumn>
    </RadzenRow>
    @if (isLoading)
    {
       <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Wrap="FlexWrap.Wrap" Class="rz-mt-12" Gap="2rem">

        <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Success" Value="100" Size="ProgressBarCircularSize.Medium" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    </RadzenStack>
    <RadzenText TagName="TagName.P" Style="font-size: 0.7rem;" Class="rz-mb-12" TextAlign="TextAlign.Center"><em>Please wait...</em></RadzenText>

    }
    else
    {
        <RadzenTemplateForm Data="@doctor" class="rz-mt-10" Submit="@((Doctor args) => { Submit(args); })">
            <RadzenRow Gap="2rem" class="rz-mt-4">
                <RadzenFieldset Text="Basic Info" class="rz-text-center">
                    <RadzenStack>
                        <RadzenRow Gap="1rem">
                            <RadzenColumn SizeMD="6" SizeLG="6" SizeXL="6" SizeXS="12" SizeSM="12">

                                <RadzenLabel Text="First Name" /><span class="rz-color-danger">*</span>
                                <RadzenTextBox Style="width: 100%;display:block" Name="FirstName" @bind-Value="@doctor.FirstName" />
                                <RadzenRequiredValidator Component="FirstName" Text="First name is required" Popup=@false />


                            </RadzenColumn>
                            <RadzenColumn SizeMD="6" SizeLG="6" SizeXL="6" SizeXS="12" SizeSM="12">
                                <RadzenLabel Text="Middle Name" />
                                <RadzenTextBox Style="width: 100%;" Name="MiddleName" @bind-Value="@doctor.MiddleName" />

                            </RadzenColumn>
                            <RadzenColumn SizeMD="6" SizeLG="6" SizeXL="6" SizeXS="12" SizeSM="12">
                                <RadzenLabel Text="Last Name" /><span class="rz-color-danger">*</span>
                                <RadzenTextBox Style="width: 100%;" Name="LastName" @bind-Value="@doctor.LastName" />
                                <RadzenRequiredValidator Component="LastName" Text="Last name is required" Popup=@false />
                            </RadzenColumn>
                            <RadzenColumn SizeMD="6" SizeLG="6" SizeXL="6" SizeXS="12" SizeSM="12">
                                <RadzenLabel Text="Date of Birth" /><span class="rz-color-danger">*</span>
                                <RadzenDatePicker Style="width: 100%;" Name="Dob" @bind-Value="doctor.Dob" ShowTime=@false DateFormat="MM/dd/yyyy" Max="@DateTime.Today.AddYears(-18)" />
                                <RadzenRequiredValidator Component="Dob" Text="Date of birth is required" Popup=@false />

                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenStack>
                </RadzenFieldset>
            </RadzenRow>
            <RadzenRow Gap="2rem" class="rz-mt-4">
                <RadzenFieldset Text="Education Info" class="rz-text-center">
                    <RadzenStack>
                        <RadzenRow Gap="1rem">
                            <RadzenColumn SizeMD="4" SizeLG="6" SizeXL="6" SizeXS="12" SizeSM="12">

                                <RadzenLabel Text="Department" class="rz-mb-1" /><span class="rz-color-danger">*</span><RadzenText TagName="TagName.Span" class="link-btn" Text="Add" @onclick=@OpenDialog />
                                <RadzenDropDown @bind-Value="doctor.DepartmentId" AllowClear="true" Placeholder="Select something" Data="@departments" Style="width: 100%;" TextProperty="DepartmentName" ValueProperty="Id" Name="DepartmentId"></RadzenDropDown>
                                <RadzenRequiredValidator Component="DepartmentId" Text="Department is required" Popup=@false />

                            </RadzenColumn>
                            <RadzenColumn SizeMD="6" SizeLG="6" SizeXL="6" SizeXS="12" SizeSM="12">
                                <RadzenLabel Text="Qualification" class="rz-mb-1" /><span class="rz-color-danger">*</span>
                                <RadzenTextBox Style="width: 100%;" Name="Qualification" @bind-Value="@doctor.Qualification" />
                                <RadzenRequiredValidator Component="Qualification" Text="Qualification is required" Popup=@false />
                            </RadzenColumn>
                            <RadzenColumn SizeMD="6" SizeLG="6" SizeXL="6" SizeXS="12" SizeSM="12">
                                <RadzenLabel Text="Speciality" /><span class="rz-color-danger">*</span>
                                <RadzenTextBox Style="width: 100%;" Name="Speciality" @bind-Value="@doctor.Speciality" />
                                <RadzenRequiredValidator Component="Speciality" Text="Speciality is required" Popup=@false />
                            </RadzenColumn>
                            <RadzenColumn SizeMD="6" SizeLG="6" SizeXL="6" SizeXS="12" SizeSM="12">
                                <RadzenLabel Text="Experience" /><span class="rz-color-danger">*</span>
                                <RadzenNumeric Placeholder="1" Style="width: 100%;" Name="Experience" @bind-Value="@doctor.Experience" Min="0" Max="100" />
                                <RadzenRequiredValidator Component="Experience" Text="Experience is required" Popup=@false />
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenStack>
                </RadzenFieldset>
            </RadzenRow>
            <RadzenRow Gap="2rem" class="rz-mt-4">
                <RadzenFieldset Text="Contact Info" class="rz-text-center">
                    <RadzenStack>
                        <RadzenRow Gap="1rem">
                            <RadzenColumn SizeMD="4" SizeLG="4" SizeXL="4" SizeXS="12" SizeSM="12">

                                <RadzenLabel Text="Email Id" /><span class="rz-color-danger">*</span>
                                <RadzenTextBox Style="width: 100%;display: block;" Name="Email" @bind-Value="@doctor.Email" Change="@(()=>CheckEmail(doctor.Email))"/>
                                <RadzenRequiredValidator Component="Email" Text="Email is required" Popup=@false />
                                <RadzenEmailValidator Component="Email" Text="Provide a valid email address" Popup=@false />
                                @*<RadzenCustomValidator Component="Email" Validator="@(() => ValidateEmail(doctor.Email))" Text="Email already exists" Popup=@false />*@
                            </RadzenColumn>
                            <RadzenColumn SizeMD="4" SizeLG="4" SizeXL="4" SizeXS="12" SizeSM="12">
                                <RadzenLabel Text="Phone Number" /><span class="rz-color-danger">*</span>
                                <RadzenTextBox Style="width: 100%;" Name="PhoneNumber" @bind-Value="@doctor.PhoneNumber" MaxLength="15" />
                                <RadzenRequiredValidator Component="PhoneNumber" Text="Phone Number is required" Popup=@false />
                            </RadzenColumn>
                            <RadzenColumn SizeMD="4" SizeLG="4" SizeXL="4" SizeSM="12">
                                <RadzenLabel Text="Alternate Phone Number" />
                                <RadzenTextBox Style="width: 100%;" Name="AlternatePhoneNumber" @bind-Value="@doctor.AlternatePhoneNumber" MaxLength="15" />
                                <RadzenCompareValidator Visible=@(!string.IsNullOrEmpty(doctor.AlternatePhoneNumber)) Value=@doctor.PhoneNumber Component="AlternatePhoneNumber" Operator=CompareOperator.NotEqual Text="Alternate phone number and phone number should not  be same" Popup=@false />
                            </RadzenColumn>

                            <RadzenColumn SizeMD="4" SizeLG="4" SizeXL="4" SizeXS="12" SizeSM="12">
                                <RadzenLabel Text="Address Line 1" /><span class="rz-color-danger">*</span>
                                <RadzenTextBox Style="width: 100%;" Name="AddressFirstLine" @bind-Value="@doctor.AddressFirstLine" />

                                <RadzenRequiredValidator Component="AddressFirstLine" Text="Address Line 1 is required" Popup=@false />

                            </RadzenColumn>
                            <RadzenColumn SizeMD="4" SizeLG="4" SizeXL="4" SizeXS="12" SizeSM="12">
                                <RadzenLabel Text="Address Line 2" />
                                <RadzenTextBox Style="width: 100%;" Name="AddressSecondLine" @bind-Value=@doctor.AddressSecondLine />


                            </RadzenColumn>
                            <RadzenColumn SizeMD="4" SizeLG="4" SizeXL="4" SizeXS="12" SizeSM="12">
                                <RadzenLabel Text="City" /><span class="rz-color-danger">*</span>
                                <RadzenTextBox Style="width: 100%;" Name="City" @bind-Value="@doctor.City" />

                                <RadzenRequiredValidator Component="City" Text="City is required" Popup=@false />

                            </RadzenColumn>
                            <RadzenColumn SizeMD="4" SizeLG="4" SizeXL="4" SizeXS="12" SizeSM="12">
                                <RadzenLabel Text="State" /><span class="rz-color-danger">*</span>
                                <RadzenTextBox Style="width: 100%;" Name="State" @bind-Value="@doctor.State" />

                                <RadzenRequiredValidator Component="State" Text="State is required" Popup=@false />
                            </RadzenColumn>
                            <RadzenColumn SizeMD="4" SizeLG="4" SizeXL="4" SizeXS="12" SizeSM="12">
                                <RadzenLabel Text="Country" /><span class="rz-color-danger">*</span>
                                <RadzenTextBox Style="width: 100%;" Name="Country" @bind-Value="@doctor.Country" />

                                <RadzenRequiredValidator Component="Country" Text="Country is required" Popup=@false />


                            </RadzenColumn>
                            <RadzenColumn SizeMD="4" SizeLG="4" SizeXL="4" SizeXS="12" SizeSM="12">
                                <RadzenLabel Text="Zip Code" /><span class="rz-color-danger">*</span>
                                <RadzenTextBox Style="width: 100%;display:block" Name="ZipCode" @bind-Value="@doctor.ZipCode" />
                                <RadzenRequiredValidator Component="ZipCode" Text="ZIP code is required" Popup=@false />
                                <RadzenRegexValidator Component="ZipCode" Text="ZIP code must be 6 digits" Pattern="\d{6}" Popup=@false />


                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenStack>
                </RadzenFieldset>
            </RadzenRow>
          
            
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="1rem" Class="rz-mt-8 rz-mb-4">
                <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Medium" Icon="save" Text="Save" />
                <RadzenButton ButtonStyle="ButtonStyle.Warning" Size="ButtonSize.Medium" Icon="restart_alt" Text="Reset" Click="@Reset" />
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Medium" Icon="arrow_back" Text="Back" Click="@Back" />
            </RadzenStack>
        </RadzenTemplateForm>
    }


</RadzenCard>

@code {
    Doctor doctor = new();
    bool isLoading = false;
    private Department[] departments { get; set; }
    [Inject]
    private IDepatmentServiceData _depatmentService { get; set; }
    [Inject]
    private IDoctorServiceData _doctorService { get; set; }
    [Inject]
    private ILoginServiceData _loginService { get; set; }
    [Inject]
    private NavigationManager navigationManager { get; set; }
    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        doctor.Dob = DateTime.Today.AddYears(-18);
        departments = await _depatmentService.GetAll();
        isLoading = false;
    }
    async Task CheckEmail(string id)
    {
        var check = await _loginService.CheckEmail(id);
        if (check)
        {
            NotificationMessage message = new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "Email Id Already Registered", Duration = 3000 };
            NotificationService.Notify(message);
            doctor.Email = string.Empty;
        }
    }
    private async Task Submit(Doctor args)
    {
        isLoading = true;
        var res = await _doctorService.Create(args);
        isLoading = false;
        if (res.IsSuccess)
        {
            var middle = (res.Value.MiddleName == null || res.Value.MiddleName == "") ? " " : res.Value.MiddleName+" ";
            Login login = new() { Id = res.Value.Id, IsActive = true, LoginType = "Doctor",HashPassword="q",SaltPassword="q", Email = res.Value.Email, Name = $"{res.Value.FirstName}{middle}{res.Value.LastName}" };
            var val = await _loginService.Create(login);
            isLoading = false;
            if (val.IsSuccess)
            {
                NotificationMessage message = new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Success", Detail = res.Message, Duration = 3000 };
                NotificationService.Notify(message);
                doctor = new Doctor();
                doctor.Dob = DateTime.Today.AddYears(-18);
                isLoading = false;
            }
            else
            {
                NotificationMessage message = new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = "Failed to add login dettail", Duration = 3000 };
                NotificationService.Notify(message);
                isLoading = false;
            }
        }
        else
        {
            NotificationMessage message = new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = res.Message, Duration = 3000 };
            NotificationService.Notify(message);
            isLoading = false;
        }
        navigationManager.NavigateTo("/Accountlogin");

    }
    void Reset()
    {
        isLoading = true;
        doctor = new Doctor();
        doctor.Dob = DateTime.Today.AddYears(-18);
        isLoading = false;
    }

    private async Task Back()
    {
        await js.InvokeVoidAsync("clientJsfunctions.GoBack");
    }
    public async Task OpenDialog()
    {
        await DialogService.OpenAsync<AddDepartment>("Add Department", new Dictionary<string, object>
            {
                { "OnClose", new EventCallback(this, OnDialogClose) }
            },
               new DialogOptions() { Resizable = true, Draggable = true });

    }

    public async Task OnDialogClose()
    {
        isLoading = true;
        departments = await _depatmentService.GetAll();
        isLoading = false;
    }

}
