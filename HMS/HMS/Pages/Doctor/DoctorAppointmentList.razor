@attribute [Authorize (Roles ="Doctor,Admin")]
@inject AuthenticationStateProvider ASP;
@inject TooltipService tooltipService;
@inject DialogService DialogService

    @if(isLoading){
    <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Wrap="FlexWrap.Wrap" Class="rz-mt-12" Gap="2rem">

        <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Success" Value="100" Size="ProgressBarCircularSize.Medium" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    </RadzenStack>
    <RadzenText TagName="TagName.P" Style="font-size: 0.7rem;" Class="rz-mb-12" TextAlign="TextAlign.Center"><em>Please wait...</em></RadzenText>



    }
    else
    {
        <RadzenText TextStyle="TextStyle.H6" class="rz-mb-4 rz-mt-6"><strong>Appointment List</strong></RadzenText>
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" Density="Density.Compact" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced" GridLines="@GridLines" AllowSorting="true" PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                Data="@appointments" TItem="Appointment" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
        <Columns>
            <RadzenDataGridColumn TItem="Appointment" Title="Patient Name" Property="Patient.FirstName" Frozen="true" Sortable="false" Filterable="false" Width="80px" TextAlign="TextAlign.Center">
                    <Template Context="data">
                        @(data.Patient.FirstName + " "+data.Patient.LastName)
                    </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Appointment" Title="Contact Number" Property="Patient.PhoneNumber" Frozen="true" Sortable="false" Filterable="false" Width="80px" TextAlign="TextAlign.Center">
                <Template Context="data">
                    @(data.Patient.PhoneNumber)
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Appointment" Title="Alternate Contact Number" Property="Patient.AlternatePhoneNumber" Frozen="true" Sortable="false" Filterable="false" Width="80px" TextAlign="TextAlign.Center">
                <Template Context="data">
                   @(data.Patient.AlternatePhoneNumber == null ? "N/A" : data.Patient.AlternatePhoneNumber)
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Appointment" Title="Appointment Date" Property="AppointmentDate" Frozen="true" Sortable="false" Filterable="false" Width="80px" TextAlign="TextAlign.Center">
                    <Template Context="data">
                        @(data.AppointmentDate.ToShortDateString())
                    </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="Appointment" Title="Appointment Time" Property="AppointmentTime" Frozen="true" Sortable="false" Filterable="false" Width="80px" TextAlign="TextAlign.Center">
                    <Template Context="data">
                    @(data.AppointmentTime.HasValue ? data.AppointmentTime.Value.ToString("t") : "N/A")
                    </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn  TItem="Appointment" Title="Status" Frozen="true" Property="Status" Sortable="false" Filterable="false" Width="80px" TextAlign="TextAlign.Center">
                <Template Context="data">
                        @if (data.Status.ToLower() == "pending")
                        {
                            <RadzenBadge Variant="Variant.Filled" BadgeStyle="BadgeStyle.Danger" Text="@data.Status" class="rz-ml-2" />
                        }
                        else if (data.Status.ToLower() == "confirmed")
                        {
                            <RadzenBadge Variant="Variant.Filled" BadgeStyle="BadgeStyle.Success" Text="@data.Status" class="rz-ml-2" />
                        }
                        else if (data.Status.ToLower() == "closed")
                        {
                            <RadzenBadge Variant="Variant.Filled" BadgeStyle="BadgeStyle.Primary" Text="@data.Status" class="rz-ml-2" />
                        }
                        else
                        {
                            <RadzenBadge Variant="Variant.Filled" BadgeStyle="BadgeStyle.Warning" Text="@data.Status" class="rz-ml-2" />
                        }
                    </Template>
            </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="Appointment" Title="Action" Frozen="true" Sortable="false" Property="Id" Filterable="false" Width="80px" TextAlign="TextAlign.Center">
                    <Template Context="data">
                        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" Gap="0.4rem" JustifyContent="JustifyContent.Center">
                        <RadzenButton ButtonStyle="ButtonStyle.Info" Icon="visibility" Size="ButtonSize.ExtraSmall" MouseEnter="@(args => ShowTooltip(args,"Appointment detail"))" MouseLeave="@(args => tooltipService.Close())" Click="@(args => ViewAppointment(data.Id))" />
                        @if (data.Status == "Pending")
                        {
                            <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="done" Size="ButtonSize.ExtraSmall" MouseEnter="@(args => ShowTooltip(args,"Confirm"))" MouseLeave="@(args => tooltipService.Close())" Click="@(args => OpenDialog(data,"Confirmed"))" />
                        }
                        @if(data.Status=="Pending" || data.Status == "Confirmed")
                        {
                            <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="close" Size="ButtonSize.ExtraSmall" MouseEnter="@(args => ShowTooltip(args,"cancel"))" MouseLeave="@(args => tooltipService.Close())" Click="@(args => OpenDialog(data,"Cancelled"))" />
                        }
                        @if (data.Status == "Confirmed" || data.Status == "Revisit")
                        {
                            <RadzenButton ButtonStyle="ButtonStyle.Primary" Icon="add" Size="ButtonSize.ExtraSmall" MouseEnter="@(args => ShowTooltip(args,"Add Summary"))" MouseLeave="@(args => tooltipService.Close())" Click="@(args => OpenDialog(data,"Examined"))" />
                        }
                        
                        </RadzenStack>
                    </Template>
                </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
    }
@code {
    bool isLoading = false;
    Radzen.DataGridGridLines GridLines = Radzen.DataGridGridLines.Default;
    IEnumerable<Appointment> appointments;
    [Parameter] public string DocId { get; set; }
    [Inject]
    private IAppointmentServiceData _appointmentServiceData { get; set; }
    [Inject]
    private NavigationManager navigationManager { get; set; }
    void ShowTooltip(ElementReference elementReference, string message, TooltipOptions options = null) => tooltipService.Open(elementReference, message, options);
    string id = string.Empty;
    string role = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        if (DocId == null)
        {
            var user = await ASP.GetAuthenticationStateAsync();
            var Id = user.User.Claims.FirstOrDefault(s => s.Type == ClaimTypes.UserData);
            var Role = user.User.Claims.FirstOrDefault(s => s.Type == ClaimTypes.Role);

            id = Id.Value;
            role = Role.Value;
            appointments = await _appointmentServiceData.GetAllById(Id.Value, Role.Value);
        }
        else
        {
            appointments = await _appointmentServiceData.GetAllById(DocId,"Doctor");
        }
        isLoading = false;

    }

    void ViewAppointment(string Id)
    {
        navigationManager.NavigateTo("/Appointments/"+Id);
    }

    public async Task OpenDialog(Appointment data, string status)
    {
        List<DropDownData> dplist = new();

        if (status.ToLower() == "confirmed")
        {
            var date1 = new DateTime(data.AppointmentDate.Year, data.AppointmentDate.Month, data.AppointmentDate.Day, 10, 0, 0);
            var date2 = new DateTime(data.AppointmentDate.Year, data.AppointmentDate.Month, data.AppointmentDate.Day, 22, 0, 0);
            var bookedlist = await _appointmentServiceData.GetAppointments(data.DoctorId, "doctor", date1);
            for(int i = 0; i <= 23; i++)
            {
                var date = date1.AddMinutes(i*30);
                var check = bookedlist.Where(s => s.AppointmentTime.HasValue &&  s.AppointmentTime.Value == date).FirstOrDefault();
                if (check == null)
                {
                    dplist.Add(new DropDownData()
                        {
                            Text = date.ToString("t"),
                            DateValue = date
                        });
                }

            }
           
           
        }
        var header = status == "Examined" ? "Add Summary" : "Appointment Confirmation";
        await DialogService.OpenAsync<AppointmentConfirmDialog>(header, new Dictionary<string, object>
            {
                { "OnClose", new EventCallback(this, OnDialogClose) },
                {"appointment" , data },
                {"Status",status},
                { "slotlist",dplist}
            }, new DialogOptions() { Resizable = true, Draggable = true });

    }

    public async Task OnDialogClose()
    {
        await OnInitializedAsync();
    }
}
