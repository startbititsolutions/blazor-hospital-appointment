@page "/forgotpassword"
@inject NotificationService NotificationService
@inject IJSRuntime js;
<PageTitle>Forgot Password</PageTitle>
<RadzenCard class="rz-mx-0">


    <RadzenText Text="Forgot Password" TextAlign="TextAlign.Center" TextStyle="TextStyle.DisplayH4" class="rz-mt-2" />
    @if(fp.UserId == null || fp.UserId ==""){
           @if (isLoading)
        {
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Wrap="FlexWrap.Wrap" Class="rz-mt-12" Gap="2rem">

                <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Success" Value="100" Size="ProgressBarCircularSize.Medium" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
            </RadzenStack>
            <RadzenText TagName="TagName.P" Style="font-size: 0.7rem;" Class="rz-mb-12" TextAlign="TextAlign.Center"><em>Please wait...</em></RadzenText>

        }
        else
        {
            <RadzenTemplateForm Data=@login class="rz-my-3 rz-mx-auto rz-p-4 rz-p-md-12" Submit="@((Login args)=>SendOtp(args))" style="max-width: 600px;">
            <RadzenStack Gap="1rem" >
                <RadzenRow AlignItems="AlignItems.Center" class="rz-mb-2">
                    <RadzenColumn Size="4" SizeMD="4">
                        <RadzenLabel Text="Email" />
                    </RadzenColumn>
                    <RadzenColumn Size="8" SizeMD="8">
                        <RadzenTextBox Style="width: 100%;display:block" Name="Email" @bind-Value="@login.Email" />
                        <RadzenRequiredValidator Component="Email" Text="Email is required" Popup=@false />
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow AlignItems="AlignItems.Center" class="rz-mb-2">
                    <RadzenColumn Size="4" SizeMD="4">

                    </RadzenColumn>
                    <RadzenColumn Size="8" SizeMD="8">
                        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                            <RadzenButton Size="ButtonSize.Medium" ButtonType="ButtonType.Submit" class="rz-button" Text="Send Otp" Icon="login" ButtonStyle="ButtonStyle.Info" />

                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenStack>
            </RadzenTemplateForm>
        }

    }
    else{
        <RadzenTemplateForm Data=@fp class="rz-my-3 rz-mx-auto rz-p-4 rz-p-md-12" Submit="@((ForgotPwd args)=>Submit(args))" style="max-width: 600px;">
        @if (isLoading)
        {
            <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Wrap="FlexWrap.Wrap" Class="rz-mt-12" Gap="2rem">

                <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Success" Value="100" Size="ProgressBarCircularSize.Medium" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
            </RadzenStack>
            <RadzenText TagName="TagName.P" Style="font-size: 0.7rem;" Class="rz-mb-12" TextAlign="TextAlign.Center"><em>Please wait...</em></RadzenText>

        }
        else
        {
            <RadzenStack Gap="1rem">
                <RadzenRow AlignItems="AlignItems.Center" class="rz-mb-2">
                    <RadzenColumn Size="4" SizeMD="4">
                        <RadzenLabel Text="OTP" />
                    </RadzenColumn>
                    <RadzenColumn Size="8" SizeMD="8">
                        <RadzenTextBox Style="width: 100%;display:block" Name="OTP" @bind-Value="@fp.Otp" />
                        <RadzenRequiredValidator Component="OTP" Text="OTP is required" Popup=@false />
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow AlignItems="AlignItems.Center" class="rz-mb-2">
                    <RadzenColumn Size="4" SizeMD="4">
                        <RadzenLabel Text="New Password" />
                    </RadzenColumn>
                    <RadzenColumn Size="8" SizeMD="8">
                        <RadzenPassword Name="NewPassword" @bind-Value=@fp.NewPassword Style="width: 100%;display:block" />
                        <RadzenRequiredValidator Component="NewPassword" Text="Enter New password" Popup=@false />
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow AlignItems="AlignItems.Center" class="rz-mb-2">
                    <RadzenColumn Size="4" SizeMD="4">
                        <RadzenLabel Text="Confirm Password" />
                    </RadzenColumn>
                    <RadzenColumn Size="8" SizeMD="8">
                        <RadzenPassword Name="ConfirmPassword" @bind-Value="@RepeatPassword" Style="width: 100%;display:block" />
                        <RadzenRequiredValidator Component="ConfirmPassword" Text="Confirm your password" Popup=@false />
                            <RadzenCompareValidator Visible=@(!string.IsNullOrEmpty(RepeatPassword)) Value=@fp.NewPassword Component="ConfirmPassword" Text="New Password and confirm password should be same" Popup=@false />
                    </RadzenColumn>
                </RadzenRow>
                <RadzenRow AlignItems="AlignItems.Center" class="rz-mb-2">
                    <RadzenColumn Size="4" SizeMD="4">

                    </RadzenColumn>
                    <RadzenColumn Size="8" SizeMD="8">
                        <RadzenStack Orientation="Orientation.Horizontal" Gap="0.5rem" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.SpaceBetween">
                            <RadzenButton Size="ButtonSize.Medium" ButtonType="ButtonType.Submit" class="rz-button" Text="Submit" Icon="login" ButtonStyle="ButtonStyle.Info" />

                        </RadzenStack>
                    </RadzenColumn>
                </RadzenRow>
            </RadzenStack>
        }
    </RadzenTemplateForm>
    }
  
</RadzenCard>
@code {
    bool isLoading = false;
    ForgotPwd fp = new();
    Login login = new Login();
    string RepeatPassword = "";
    [Inject]
    private NavigationManager navigationManager { get; set; }
    [Inject]
    private ILoginServiceData _loginService { get; set; }
    NotificationMessage message = new NotificationMessage { Duration = 3000 };
    void Goto(string url)
    {
        navigationManager.NavigateTo(url);
    }
    protected override async Task OnInitializedAsync()
    {

    }
    async Task SendOtp(Login args)
    {
        isLoading = true;
        if (args.Email == null || args.Email == "")
        {
            Goto("/Accountlogin");
        }
        var res = await _loginService.SendOtp(args.Email);
        isLoading = false;
        if(res.IsSuccess)
        {
            fp.UserId = res.Value.Id;
            fp.Email = res.Value.Email;
            isLoading = false;
            message.Summary = "Success";
            message.Severity = NotificationSeverity.Success;
            message.Detail = res.Message;
        }
        else
        {
            isLoading = false;
            message.Summary = "Error";
            message.Severity = NotificationSeverity.Error;
            message.Detail = res.Message;
        }
        NotificationService.Notify(message);
    }
    async Task Submit(ForgotPwd args)
    {
        isLoading = true;
        var res = await _loginService.ChangePassword(args);
        if (res.IsSuccess)
        {
            message.Summary = "Success";
            message.Severity = NotificationSeverity.Success;
            message.Detail = res.Message;
        }
        else
        {
            message.Summary = "Error";
            message.Severity = NotificationSeverity.Error;
            message.Detail = res.Message;
        }
        isLoading = false;
        NotificationService.Notify(message);
        Goto("/Accountlogin");
    }
}
