@page "/changepassword"
@attribute [Authorize]
@inject IJSRuntime js;
@inject AuthenticationStateProvider ASP
@inject NotificationService NotificationService
<PageTitle>Change Password</PageTitle>
<RadzenCard class="rz-mx-0">
    <RadzenRow JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Normal" Gap="1rem">
        <RadzenColumn Size="12" class="rz-text-align-center">
            <RadzenBreadCrumb>
                <RadzenBreadCrumbItem Path="/" Text="" />
                <RadzenBreadCrumbItem Path="/changepassword" Text="Change Password" />
            </RadzenBreadCrumb>
        </RadzenColumn>
    </RadzenRow>
    @if (isLoading)
    {
        <RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Center" JustifyContent="JustifyContent.Center" Wrap="FlexWrap.Wrap" Class="rz-mt-12" Gap="2rem">

            <RadzenProgressBarCircular ProgressBarStyle="ProgressBarStyle.Success" Value="100" Size="ProgressBarCircularSize.Medium" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
        </RadzenStack>
        <RadzenText TagName="TagName.P" Style="font-size: 0.7rem;" Class="rz-mb-12" TextAlign="TextAlign.Center"><em>Please wait...</em></RadzenText>


    }
    else
    {
        <RadzenTemplateForm Data="@change" class="rz-mt-4 " Submit="@(async (PasswordChange args) => { await Submit(args); })">
            <RadzenText TagName="TagName.Div" class="rz-mt-2 rz-mx-auto" AlignItems="AlignItems.Center">
                <RadzenFieldset Text="Change Password" class="rz-text-center" Style="width:50%">
                    <RadzenStack Orientation="Orientation.Vertical" Style="width:100%">
                        <RadzenRow Style="width:100%">
                            <RadzenStack Orientation="Orientation.Vertical" Style="width:100%">
                                <RadzenLabel>Current Password<span class="rz-color-danger">*</span></RadzenLabel>
                                <RadzenPassword Name="Password" @bind-Value=@change.CurrentPassword Style="width: 100%;display:block" />
                                <RadzenRequiredValidator Component="Password" Text="Enter password" Popup=@false />
                            </RadzenStack>
                        </RadzenRow>
                        <RadzenRow Style="width:100%">
                            <RadzenStack Orientation="Orientation.Vertical" Style="width:100%">
                                <RadzenLabel>New Password<span class="rz-color-danger">*</span></RadzenLabel>
                                <RadzenPassword Name="NewPassword" @bind-Value=@change.NewPassword Style="width: 100%;display:block" />
                                <RadzenRequiredValidator Component="NewPassword" Text="Enter New password" Popup=@false />
                            </RadzenStack>
                        </RadzenRow>
                        <RadzenRow  Style="width:100%" >
                            <RadzenStack Orientation="Orientation.Vertical" Style="width:100%">
                                <RadzenLabel>Confirm Password<span class="rz-color-danger">*</span></RadzenLabel>
                                <RadzenPassword Name="RepeatPassword" @bind-Value=@RepeatPassword Style="width: 100%;display:block" />
                                <RadzenRequiredValidator Component="RepeatPassword" Text="Repeat your password" Popup=@false />
                                <RadzenCompareValidator Visible=@(!string.IsNullOrEmpty(RepeatPassword)) Value=@change.NewPassword Component="RepeatPassword" Text="New Password and confirm password should be same" Popup=@false />
                            </RadzenStack>
                        </RadzenRow>
                    </RadzenStack>
                </RadzenFieldset>


            </RadzenText>
            <RadzenRow Gap="2rem" class="rz-mt-2">
                <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Start" Gap="1rem" Class="rz-mt-8 rz-mb-4">
                    <RadzenButton ButtonType="ButtonType.Submit" ButtonStyle="ButtonStyle.Success" Size="ButtonSize.Medium" Icon="save" Text="Save" />
                    <RadzenButton ButtonStyle="ButtonStyle.Warning" Size="ButtonSize.Medium" Icon="restart_alt" Text="Reset" Click="@Reset" />
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Medium" Icon="arrow_back" Text="Back" Click="@Back" />
                </RadzenStack>
            </RadzenRow>
        </RadzenTemplateForm>
    }
</RadzenCard>


@code {
    bool isLoading = false;
    string RepeatPassword = "";
    PasswordChange change = new();
    [Inject]
    private NavigationManager navigationManager { get; set; }
    [Inject]
    private ILoginServiceData _loginServiceData { get; set; }
    protected override async Task OnInitializedAsync()
    {
        Reset();
    }

    void Reset()
    {
        isLoading = true;
        change = new();
        RepeatPassword = "";
        isLoading = false;
    }
    void Refresh()
    {
        navigationManager.NavigateTo("/changepassword");
    }

    private async Task Back()
    {
        await js.InvokeVoidAsync("clientJsfunctions.GoBack");
    }
    private async Task Submit(PasswordChange passwordChange)
    {
        isLoading = true;
        var user = await ASP.GetAuthenticationStateAsync();
        var Id = user.User.Claims.FirstOrDefault(s => s.Type == ClaimTypes.UserData);
        passwordChange.UserId = Id.Value;
        var res = await _loginServiceData.PasswordLoginChange(passwordChange);
        isLoading = false;
        if (res.IsSuccess)
        {
            NotificationMessage message = new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Success", Detail = res.Message, Duration = 3000 };
            NotificationService.Notify(message);
        }
        else
        {
            NotificationMessage message = new NotificationMessage { Severity = NotificationSeverity.Error, Summary = "Error", Detail = res.Message, Duration = 3000 };
            NotificationService.Notify(message);
        }
        await OnInitializedAsync();

    }
}
